.\" Automatically generated by Pandoc 2.5
.\"
.TH "_PRINTF" "1" "July 28, 2023" "_printf 0.0.5" "User Manual"
.hy
.SH NAME
.PP
_printf \- function that produces output according to a format
.SH SYNOPSIS
.PP
**_printf** \f[I]FORMAT\f[R] [\f[I]ARGUMENT\f[R]]\&...
.PP
#include <stdio.h> #include <stdarg.h> #include <stdlib.h> #include
<unistd.h> #include \[lq]main.h\[rq]
.PP
int _printf(const char *format, \&...);
.SH DESCRIPTION
.PP
The **_printf** function formats and prints output to the standard
output (stdout) according to the provided format string.
The function supports various format specifiers and can handle character
strings, characters, integers, and default (unknown) specifiers.
.PP
The supported format specifiers are:
.IP
.nf
\f[C]
%c: Character specifier. It expects an int argument that represents the character to be printed.

%s: String specifier. It expects a char * argument containing the string to be printed.

%d, %i: Integer specifiers. They expect an int argument that will be printed as a signed decimal number.

%%: Percent specifier. It is used to print a literal percent symbol (\[dq]%\[dq]).

%b: Binary specifier. It is used to print binary numbers.
\f[R]
.fi
.PP
If an unknown format specifier is encountered, it will be printed as %r.
.SH PARAMETERS
.PP
\f[B]format\f[R]: The character string containing the format specifiers
to be processed and printed.
.SH RETURN VALUE
.PP
The function returns the total number of characters printed (excluding
the null byte) if successful.
If format is NULL, the function returns \-1.
In case of any other errors, the return value is also \-1.
.SH EXAMPLES
.PP
#include <stdio.h>
.PP
int main() { int num = 42; **char *str = \[lq]Hello, world!\[rq];** char
ch = `A';
.IP
.nf
\f[C]
// Output: \[dq]The number is: 42\[dq]
_printf(\[dq]The number is: %d\[rs]n\[dq], num);

// Output: \[dq]String: Hello, world!\[dq]
_printf(\[dq]String: %s\[rs]n\[dq], str);

// Output: \[dq]Character: A\[dq]
_printf(\[dq]Character: %c\[rs]n\[dq], ch);

// Output: \[dq]Unknown specifier: %r\[dq]
_printf(\[dq]Unknown specifier: %z\[rs]n\[dq]);

return 0;
\f[R]
.fi
.PP
}
.SH NOTES
.IP
.nf
\f[C]
The _printf function uses the standard C library functions va_list, va_start, and va_end to handle variable argument lists.

It is the caller\[aq]s responsibility to ensure that the number and types of arguments provided match the format specifiers in the format string.

The function does not handle all possible format specifiers like floating\-point numbers or hexadecimal formatting. Only the specified format specifiers mentioned above are supported.

The function writes the formatted output to the standard output (stdout), which is typically the terminal/console.
\f[R]
.fi
.SH AUTHORS
.PP
Jose G.
Nieves Milete Gabriel Castro
