.\" Automatically generated by Pandoc 2.5
.\"
.TH "" "" "" "" ""
.hy
.PP
\&.TH _printf.c
.PP
\&.SH NAME
.PP
_printf \- Custom printf function implementation
.PP
\&.SH SYNOPSIS
.PP
#include <stdio.h> #include <stdarg.h> #include <stdlib.h> #include
<unistd.h> #include \[lq]main.h\[rq]
.PP
int _printf(const char *format, \&...);
.PP
\&.SH DESCRIPTION
.PP
The _printf function is a custom implementation of the standard C
library function printf, which is used to format and print data to the
standard output stream.
This custom version supports the conversion specifiers %c, %s, %d, and
%i, similar to the standard printf.
.PP
\&.SH FORMAT HANDLERS
.PP
The _printf function uses format handlers to process the conversion
specifiers in the provided format string.
The format handlers are defined in the FormatHandler structure:
.PP
typedef struct { char specifier; int (*handler)(va_list args); }
FormatHandler;
.IP
.nf
\f[C]
specifier: The character representing the conversion specifier to be handled.
handler: A function pointer to the specific function responsible for handling the corresponding conversion specifier.
\f[R]
.fi
.PP
The available format handlers are as follows:
.IP
.nf
\f[C]
%c: Handles the %c conversion specifier by printing a single character.
%s: Handles the %s conversion specifier by printing a null\-terminated string.
%d: Handles the %d conversion specifier by printing a signed integer.
%i: Handles the %i conversion specifier by printing a signed integer.
\f[R]
.fi
.PP
\&.SH RETURN VALUE
.PP
The _printf function returns the total number of characters printed
(excluding the null terminator) on success.
On failure, it returns \-1.
USAGE
.PP
To use the _printf function, include the required headers and the main.h
header file that presumably contains the definition of the FormatHandler
structure and the format handlers.
Then, call the _printf function with the desired format string and any
additional arguments:
.PP
int _printf(const char *format, \&...);
.PP
The function accepts a format string (format) and optional additional
arguments based on the format specifiers used in the string.
It processes the format string and prints the formatted output to the
standard output stream.
.PP
\&.SH EXAMPLES
.PP
Here are some examples demonstrating how to use the _printf function:
.PP
#include <stdio.h>
.PP
int main() { _printf(\[lq]Hello, %s!\[rq], \[lq]world\[rq]); // Output:
Hello, world! _printf(\[lq]The answer is %d.\[rq], 42); // Output: The
answer is 42.
_printf(\[lq]The character is `%c'.\[rq], `A'); // Output: The character
is `A'.
_printf(\[lq]Formatted: %d, %s, %c\[rq], 123, \[lq]example\[rq], `X');
// Output: Formatted: 123, example, X return 0; }
.PP
\&.SH AUTHORS Jose G.
Nieves Milete Gabriel Castro
